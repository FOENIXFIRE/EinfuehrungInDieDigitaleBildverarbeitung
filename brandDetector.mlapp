classdef brandDetector < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                       matlab.ui.Figure
        LoadButton                     matlab.ui.control.Button
        BrandEditFieldLabel            matlab.ui.control.Label
        BrandEditField                 matlab.ui.control.EditField
        PredefinedVideosDropDownLabel  matlab.ui.control.Label
        DropDown                       matlab.ui.control.DropDown
        GetBrandButton                 matlab.ui.control.Button
        BrandAxes                      matlab.ui.control.UIAxes
        ImageAxes                      matlab.ui.control.UIAxes
    end


    methods (Access = private)
        
        function updateimage(app, imagefile)
            
            % For skoda.png, read the second image in the file 
            if strcmp(imagefile,'skoda.png')
                im = imread('skoda.png');
            else
                try
                    im = imread(imagefile);
                catch ME
                    % If problem reading image, display error message
                    uialert(app.UIFigure, ME.message, 'Image Error');
                    return;
                end   
            end
            imagesc(app.ImageAxes,im);
        end
        
        
        %%output matched brand
        function updatebrand(app, image)
            % load logo picture into Image
            imagesc(app.BrandAxes,image);
        end
        
 
        %%find logo position (Kevin Baur 11827180)
        function logoPosition(app, im)
            im = imresize(im, [480 NaN]);
            image = im;
            imgray = rgb2gray(im);
            imbin = imbinarize(imgray);
            im = edge(imgray, 'sobel');
            
            im = imdilate(im, strel('diamond', 2)); %highlights vertices
            im = imfill(im, 'holes'); %fills surfaces
            im = imerode(im, strel('diamond', 10)); % deletes uneccessary white surfaces
            im = imdilate(im, strel('diamond', 6));
            %%%%%%%%%%%%%%%%%%%%%%%%
            
            Iprops = regionprops(im,'BoundingBox','Area', 'Image'); %divides and saves the data in an array
            area = Iprops.Area;
            count = numel(Iprops);
            maxa = 7000; %max size logo
            mina = 1000; %min size logo
            boundingBox = Iprops.BoundingBox;
            for i=1:count
               if maxa > Iprops(i).Area && mina < Iprops(i).Area
                   maxa = Iprops(i).Area;
                   boundingBox = Iprops(i).BoundingBox;
               end
            end    
            
            im = imcrop(imbin, boundingBox); %cut logo, boundingBox
            
            %resize logo to 240 NaN
            im = imresize(im, [240 NaN]); %vergößern
            
            %reduce dust
            im = imopen(im, strel('rectangle', [4 4]));
            %imshow(im);
            %%give logo to brand matching
            brandMatching(app,im);
        end
        
        
        %%brand matching (Manuel Lautschacher 11822449) 
        function brandMatching(app,im)
            %imds = imageDatastore({'logos/suzuki.png','logos/audi.png','logos/seat.png'});
            imd = imageDatastore('logos','FileExtensions',{'.png'}, 'LabelSource' ,'foldernames', 'IncludeSubfolders', true);
            
            c = countEachLabel(imd)
            
            a = c.Count;
            max = 0;
            maxI = 0;
            
            a1 = a(1)+a(2);
            numMatchedPoints = zeros(1,a1);
            
            test = im;
     
            for i = 1:10
            
            logo = readimage(imd,i);
            logo = rgb2gray(logo);
            logo = imbinarize(logo);
            
            
            [rowsL colsL c] = size(test);
            
            logo = imresize(logo, [rowsL colsL]);
            
            pointsA = detectSURFFeatures(logo);
            pointsB = detectSURFFeatures(test);
            
            [featuresA, pointsA] = extractFeatures(logo, pointsA);
            [featuresB, pointsB] = extractFeatures(test, pointsB);
            
            indexPairs = matchFeatures(featuresA,featuresB,'Method', 'Exhaustive', 'Unique', true);
            numMatchedPoints(i) = int32(size(indexPairs,1));
            
            %matchedPointsA = pointsA(indexPairs(:,1),:);
            %matchedPointsB = pointsB(indexPairs(:,2),:);
            %showMatchedFeatures(logo, test, matchedPointsA, matchedPointsB, 'montage');
            
            
            
            if (max <= numMatchedPoints(i))
                max = numMatchedPoints(i);
                maxI = i;
            end
               
            end
            
            fullFileNames = vertcat(imd.Files);
            [folder, baseFileNameNoExt, ext] = fileparts(fullFileNames{maxI});
            brandIm = readimage(imd,maxI);
            
            app.BrandEditField.Value = baseFileNameNoExt; %%updates brand in textfield GUI
            
            %%updates brand image in GUI
            updatebrand(app, brandIm);
        end
        
        %%Videos to frames (Jan König 01007167)
        function Video2Frames(app, video)
            % folderS "VideoFiles" & "Frames" needs to be in working directory
            
            % iterating each frame and writing it to Frames/ as framex.png
            for img = 1:video.NumFrames
                filename = strcat('Frames/frame', num2str(img), '.png');
                tempframe = read(video, img); 
                imwrite(tempframe, filename);
            end
            logoPosition(app,tempframe);
        end
        
        %%car detection (Lucio Delen 11713066) 
        function carDetection(app, video)
            foregroundDetector = vision.ForegroundDetector('NumGaussians', 3, ...
            'NumTrainingFrames', 50);
        
            %Put in your video file here
            videoReader = VideoReader(video);
            
            blobAnalysis = vision.BlobAnalysis('BoundingBoxOutputPort', true, ...
                'AreaOutputPort', false, 'CentroidOutputPort', false, ...
                'MinimumBlobArea', 2000);
            
            videoPlayer = vision.VideoPlayer('Name', 'Detected Cars');
            videoPlayer.Position(3:4) = [650,400];  % window size: [width, height]
            se = strel('square', 5); % morphological filter for noise removal
            
            for img = 1:videoReader.NumFrames
                frame = readFrame(videoReader); % read the next video frame
            
                % Detect the foreground in the current video frame
                foreground = step(foregroundDetector, frame);
            
                % Use morphological opening to remove noise in the foreground
                filteredForeground = imopen(foreground, se);
            
                % Detect the connected components with the specified minimum area, and
                % compute their bounding boxes
                bbox = step(blobAnalysis, filteredForeground);
                
                % Draw bounding boxes around the detected cars
                result = insertShape(frame, 'Rectangle', bbox, 'Color', 'green');
                % Display the number of cars found in the video frame
                numCars = size(bbox, 1);
                if numCars>0
                    disp('found a car')
                end
                result = insertText(result, [10 10], numCars, 'BoxOpacity', 1, ...
                    'FontSize', 14);
            
                step(videoPlayer, result);  % display the results
            end
                
        end
        
        %%detects stopped car (Vincent Zoechling 11913652) 
        function stopDetection(app, video)
            
            end
        end


    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
             % Configure image axes
            app.ImageAxes.Visible = 'off';
            app.ImageAxes.Colormap = gray(256);
            axis(app.ImageAxes, 'image');
            
            % Update the image
            updateimage(app, 'suzuki.png');
        end

        % Button pushed function: LoadButton
        function LoadButtonPushed(app, event)
            % Display uigetfile dialog
            filterspec = {'*.png;'};
            f = uigetfile(filterspec);
            %v = Videoreader(f);
            %while hasFrame(v)
            %imshow(readFrame(v), 'Parent', app.ImageAxes);
            %end
        end

        % Value changed function: DropDown
        function DropDownValueChanged(app, event)
             % Update the image and histograms
            updateimage(app, app.DropDown.Value);
        end

        % Button pushed function: GetBrandButton
        function GetBrandButtonPushed(app, event)
            video = imread(app.DropDown.Value);
            %Video2Frames(app,video);
            logoPosition(app,video);
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Color = [0.9412 0.9412 0.9412];
            app.UIFigure.Position = [100 100 672 610];
            app.UIFigure.Name = 'MATLAB App';

            % Create LoadButton
            app.LoadButton = uibutton(app.UIFigure, 'push');
            app.LoadButton.ButtonPushedFcn = createCallbackFcn(app, @LoadButtonPushed, true);
            app.LoadButton.Position = [423 414 143 23];
            app.LoadButton.Text = 'Load Custom Video';

            % Create BrandEditFieldLabel
            app.BrandEditFieldLabel = uilabel(app.UIFigure);
            app.BrandEditFieldLabel.HorizontalAlignment = 'right';
            app.BrandEditFieldLabel.Position = [188 101 38 22];
            app.BrandEditFieldLabel.Text = 'Brand';

            % Create BrandEditField
            app.BrandEditField = uieditfield(app.UIFigure, 'text');
            app.BrandEditField.Position = [241 101 100 22];

            % Create PredefinedVideosDropDownLabel
            app.PredefinedVideosDropDownLabel = uilabel(app.UIFigure);
            app.PredefinedVideosDropDownLabel.HorizontalAlignment = 'right';
            app.PredefinedVideosDropDownLabel.Position = [391 462 103 22];
            app.PredefinedVideosDropDownLabel.Text = 'Predefined Videos';

            % Create DropDown
            app.DropDown = uidropdown(app.UIFigure);
            app.DropDown.Items = {'car one', 'car two'};
            app.DropDown.ItemsData = {'suzuki.png', 'skoda.png', ''};
            app.DropDown.ValueChangedFcn = createCallbackFcn(app, @DropDownValueChanged, true);
            app.DropDown.Position = [509 458 89 29];
            app.DropDown.Value = 'suzuki.png';

            % Create GetBrandButton
            app.GetBrandButton = uibutton(app.UIFigure, 'push');
            app.GetBrandButton.ButtonPushedFcn = createCallbackFcn(app, @GetBrandButtonPushed, true);
            app.GetBrandButton.BackgroundColor = [1 1 1];
            app.GetBrandButton.Position = [273 226 127 45];
            app.GetBrandButton.Text = 'Get Brand';

            % Create BrandAxes
            app.BrandAxes = uiaxes(app.UIFigure);
            app.BrandAxes.XTick = [];
            app.BrandAxes.XTickLabel = '';
            app.BrandAxes.YTick = [];
            app.BrandAxes.FontSize = 1;
            app.BrandAxes.Position = [387 50 112 124];

            % Create ImageAxes
            app.ImageAxes = uiaxes(app.UIFigure);
            app.ImageAxes.XTick = [];
            app.ImageAxes.YTick = [];
            app.ImageAxes.FontSize = 1;
            app.ImageAxes.Position = [79 371 240 158];

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = brandDetector

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
